{"version":3,"file":"index.js","sources":["../src/core/astBuilder.ts","../src/core/tokenizer.ts","../src/core/parser.ts","../src/index.ts"],"sourcesContent":["import type {\r\n  ASTArray,\r\n  ASTBoolean,\r\n  ASTChildren,\r\n  ASTNull,\r\n  ASTNumber,\r\n  ASTObject,\r\n  ASTObjectKey,\r\n  ASTResult,\r\n  ASTString,\r\n} from \"../types/ast\";\r\nimport type TokenizerResult from \"../types/tokenizerResult\";\r\n\r\nclass CompilationError extends Error {\r\n  constructor(token: TokenizerResult) {\r\n    super(\r\n      `\"${token.value}\" is not valid JSON\\nline: ${token.startLine}, column: ${token.startColumn}`\r\n    );\r\n    this.name = \"CompilationError\";\r\n  }\r\n}\r\n\r\nclass ASTBuilder {\r\n  constructor() {}\r\n\r\n  formatStr(str: string) {\r\n    return str\r\n      .substring(1, str.length - 1) //We remove useless quotes\r\n      .replace(/\\\\\\\\/g, \"\\\\\"); //TODO: Fixe this shit \\\\n -> \\n\r\n  }\r\n\r\n  appendBoolean(token: TokenizerResult): ASTBoolean {\r\n    return {\r\n      type: \"BOOLEAN\",\r\n      value: token.type === \"TRUE_BOOLEAN\" ? true : false,\r\n    };\r\n  }\r\n\r\n  appendNullValue(token: TokenizerResult): ASTNull {\r\n    return {\r\n      type: \"NULL_VALUE\",\r\n      value: null as null,\r\n    };\r\n  }\r\n\r\n  appendString(token: TokenizerResult): ASTString {\r\n    return {\r\n      type: \"STRING\",\r\n      value: this.formatStr(token.value),\r\n    };\r\n  }\r\n\r\n  appendArray(token: TokenizerResult): ASTArray {\r\n    return {\r\n      type: \"ARRAY\",\r\n      properties: [] as any,\r\n    };\r\n  }\r\n\r\n  appendObject(token: TokenizerResult): ASTObject {\r\n    return {\r\n      type: \"OBJECT\",\r\n      properties: [],\r\n    };\r\n  }\r\n\r\n  appendNumber(token: TokenizerResult): ASTNumber {\r\n    return {\r\n      type: \"NUMBER\",\r\n      value: Number(token.value),\r\n    };\r\n  }\r\n\r\n  appendKey(token: TokenizerResult): ASTObjectKey {\r\n    return {\r\n      type: \"OBJECT_KEY\",\r\n      name: this.formatStr(token.value),\r\n      properties: [],\r\n    };\r\n  }\r\n\r\n  buildAST(tokens: TokenizerResult[]) {\r\n    const tree: ASTResult = { type: \"JSON\", properties: [] };\r\n    const childrens: any[] = [tree];\r\n\r\n    let lastScannedToken = null;\r\n    for (let i = 0; i < tokens.length; ++i) {\r\n      const actualToken = tokens[i];\r\n      const actualChild = childrens[childrens.length - 1];\r\n\r\n      if (actualToken.type === \"UNKNOWN\") {\r\n        throw new CompilationError(actualToken);\r\n      } else if (\r\n        actualToken.type === \"TRUE_BOOLEAN\" ||\r\n        actualToken.type === \"FALSE_BOOLEAN\"\r\n      ) {\r\n        actualChild.properties.push(this.appendBoolean(actualToken));\r\n      } else if (actualToken.type === \"NULL\") {\r\n        actualChild.properties.push(this.appendNullValue(actualToken));\r\n      } else if (actualToken.type === \"NUMBER\") {\r\n        actualChild.properties.push(this.appendNumber(actualToken));\r\n      } else if (actualToken.type === \"STRING\") {\r\n        if (actualChild.type === \"OBJECT\") {\r\n          const child = this.appendKey(actualToken);\r\n          actualChild.properties.push(child);\r\n          childrens.push(child);\r\n        } else actualChild.properties.push(this.appendString(actualToken));\r\n      } else if (actualToken.type === \"START_BRACKET\") {\r\n        const child = this.appendArray(actualToken);\r\n        actualChild.properties.push(child);\r\n        childrens.push(child);\r\n      } else if (actualToken.type === \"START_BRACE\") {\r\n        const child = this.appendObject(actualToken);\r\n        actualChild.properties.push(child);\r\n        childrens.push(child);\r\n      } else if (actualToken.type === \"END_BRACKET\") {\r\n        if (\r\n          actualChild.type === \"ARRAY\" &&\r\n          actualChild.properties.length % 2 !== 0\r\n        )\r\n          throw new CompilationError(lastScannedToken);\r\n        if (actualChild.type !== \"ARRAY\")\r\n          throw new CompilationError(actualToken);\r\n        childrens.pop();\r\n      } else if (actualToken.type === \"END_BRACE\") {\r\n        if (\r\n          actualChild.type === \"OBJECT\" &&\r\n          actualChild.properties.length % 2 !== 0\r\n        )\r\n          throw new CompilationError(lastScannedToken);\r\n\r\n        if (actualChild.type === \"OBJECT_KEY\") {\r\n          childrens.pop();\r\n        }\r\n\r\n        if (childrens[childrens.length - 1].type !== \"OBJECT\")\r\n          throw new CompilationError(actualToken);\r\n\r\n        childrens.pop();\r\n      } else if (actualToken.type === \"COMA\") {\r\n        if (actualChild.type !== \"OBJECT_KEY\" && actualChild.type !== \"ARRAY\") {\r\n          throw new CompilationError(actualToken);\r\n        }\r\n\r\n        if (actualChild.type === \"OBJECT_KEY\") {\r\n          childrens.pop();\r\n        }\r\n      } else if (actualToken.type === \"COLON\") {\r\n        if (actualChild.type !== \"OBJECT_KEY\") {\r\n          throw new CompilationError(actualToken);\r\n        }\r\n      }\r\n\r\n      if (actualToken.type !== \"WHITE_SPACE\") lastScannedToken = actualToken;\r\n\r\n      if (tree.properties.length > 1) throw new CompilationError(actualToken);\r\n      // console.log(structuredClone({ actualToken, tree, actualChild, childrens }));\r\n    }\r\n\r\n    return tree;\r\n  }\r\n}\r\n\r\nexport default ASTBuilder;\r\n","import type TokenizerResult from \"../types/tokenizerResult\";\r\n\r\ntype Tokens = {\r\n  [key: string]: RegExp;\r\n};\r\n\r\ntype MatcherResult = {\r\n  type: string;\r\n  wordLength: number;\r\n};\r\n\r\nclass Tokenizer {\r\n  private defaultType = \"UNKNOWN\";\r\n\r\n  constructor(private tokens: Tokens = {}) {}\r\n\r\n  setDefaultType(type: string) {\r\n    this.defaultType = type;\r\n  }\r\n\r\n  getDefaultType() {\r\n    return this.defaultType;\r\n  }\r\n\r\n  getTokens() {\r\n    return this.tokens;\r\n  }\r\n\r\n  addToken(type: string, value: RegExp) {\r\n    this.tokens[type] = value;\r\n  }\r\n\r\n  private matcher(str: string, type: string, value: RegExp): MatcherResult {\r\n    value.lastIndex = 0;\r\n    const match = value.exec(str);\r\n    if (!match || match.index !== 0) {\r\n      return { type: this.defaultType, wordLength: 1 };\r\n    }\r\n    return {\r\n      type,\r\n      wordLength: match[0].length,\r\n    };\r\n  }\r\n\r\n  tokenize(str: string): TokenizerResult[] {\r\n    const tokens = [];\r\n    const lines = str.split(/(\\n)/g);\r\n\r\n    for (let startLine = 0; startLine < lines.length; ++startLine) {\r\n      const line = lines[startLine];\r\n\r\n      for (let startColumn = 0; startColumn < line.length; ++startColumn) {\r\n        const charIndex = (startLine + 1) * (startColumn + 1) - 1;\r\n\r\n        let result = null;\r\n        for (const [type, value] of Object.entries(this.tokens)) {\r\n          result = this.matcher(\r\n            str.substring(charIndex, str.length),\r\n            type,\r\n            value\r\n          );\r\n          if (result.type !== this.defaultType) break;\r\n        }\r\n\r\n        tokens.push({\r\n          type: result.type,\r\n          value: str.substring(charIndex, charIndex + result.wordLength),\r\n          startLine,\r\n          startColumn,\r\n          endLine: startLine,\r\n          endColumn: startColumn + result.wordLength - 1,\r\n        });\r\n        startColumn += result.wordLength - 1;\r\n      }\r\n    }\r\n\r\n    return tokens;\r\n  }\r\n}\r\n\r\nexport default Tokenizer;\r\n","import type { ASTArray, ASTObject, ASTResult, ASTSimple } from \"../types/ast\";\r\nimport type {\r\n  JSONArray,\r\n  JSONObject,\r\n  JSONResult,\r\n  JSONPrimitif,\r\n} from \"../types/json\";\r\nimport ASTBuilder from \"./astBuilder\";\r\nimport Tokenizer from \"./tokenizer\";\r\n\r\nconst TOKENS = {\r\n  STRING: /(['\"])(?:\\\\\\1|.)*?\\1/,\r\n  NUMBER: /\\d+(?:.\\d+)?/,\r\n  WHITE_SPACE: /\\s+/,\r\n  COMA: /,/,\r\n  COLON: /:/,\r\n  TRUE_BOOLEAN: /true/,\r\n  FALSE_BOOLEAN: /false/,\r\n  NULL: /null/,\r\n  START_BRACKET: /\\[/,\r\n  END_BRACKET: /\\]/,\r\n  START_BRACE: /\\{/,\r\n  END_BRACE: /\\}/,\r\n} as const;\r\n\r\nclass Parser {\r\n  private tokenizer = new Tokenizer(TOKENS);\r\n  private astBuilder = new ASTBuilder();\r\n\r\n  parse(str: string): JSONResult {\r\n    //trim ?\r\n    //TODO\r\n    const tokens = this.tokenizer.tokenize(str);\r\n    const ast = this.astBuilder.buildAST(tokens);\r\n    return this.parseASTBranch(ast.properties[0]);\r\n  }\r\n\r\n  private parseASTBranch(\r\n    astBranch: ASTResult[\"properties\"][number]\r\n  ): JSONResult {\r\n    if (astBranch.type === \"OBJECT\") {\r\n      return this.parseObject(astBranch);\r\n    }\r\n\r\n    if (astBranch.type === \"ARRAY\") {\r\n      return this.parseArray(astBranch);\r\n    }\r\n\r\n    return this.parsePrimitif(astBranch);\r\n  }\r\n\r\n  private parseArray(astBranch: ASTArray): JSONArray {\r\n    const json: JSONArray = [];\r\n    for (const property of astBranch.properties) {\r\n      json.push(this.parseASTBranch(property));\r\n    }\r\n    return json;\r\n  }\r\n\r\n  private parseObject(astBranch: ASTObject): JSONObject {\r\n    const json: JSONObject = {};\r\n    for (const property of astBranch.properties) {\r\n      json[property.name] = this.parseASTBranch(property.properties[0]);\r\n    }\r\n    return json;\r\n  }\r\n\r\n  private parsePrimitif(astBranch: ASTSimple): JSONPrimitif {\r\n    return astBranch.value;\r\n  }\r\n}\r\n\r\nexport default Parser;\r\n","import Parser from \"./core/parser\";\r\n\r\n// const json =\r\n//   '{\"error\": false, \"test\": \"true \\\\n hello\", \"something\": 53.6, \"glossary\":{\"title\":\"example glossary\",\"GlossDiv\":{\"title\":\"S\",\"GlossList\":{\"GlossEntry\":{\"ID\":\"SGML\",\"SortAs\":\"SGML\",\"GlossTerm\":\"Standard Generalized Markup Language\",\"Acronym\":\"SGML\",\"Abbrev\":\"ISO 8879:1986\",\"GlossDef\":{\"para\":\"A meta-markup language, used to create markup languages such as DocBook.\",\"GlossSeeAlso\":[\"GML\",\"XML\"]},\"GlossSee\":\"markup\"}}}}}';\r\n// const myParser = JSONReader(json),\r\n//   realParser = JSON.parse(json);\r\n// console.log(myParser);\r\n// console.log(\"Should Get: \", realParser);\r\n\r\n// function areJSONObjectsEqual(obj1, obj2) {\r\n//   const json1 = JSON.stringify(obj1);\r\n//   const json2 = JSON.stringify(obj2);\r\n\r\n//   return json1 === json2;\r\n// }\r\n\r\n// console.log(\"Are equal:\", areJSONObjectsEqual(realParser, myParser));\r\n// console.log(JSONReader('\"some \\\\n new line\"'));\r\n// console.log(JSONReader('{\"a\": null,    }'));\r\n\r\n/**\r\n * TODO:\r\n * Better errors\r\n * Fix \\\\\r\n */\r\n\r\nconst parser = new Parser();\r\n\r\nexport default parser.parse.bind(parser);\r\n"],"names":["CompilationError","Error","constructor","token","super","value","startLine","startColumn","this","name","ASTBuilder","formatStr","str","substring","length","replace","appendBoolean","type","appendNullValue","appendString","appendArray","properties","appendObject","appendNumber","Number","appendKey","buildAST","tokens","tree","childrens","lastScannedToken","i","actualToken","actualChild","push","child","pop","Tokenizer","defaultType","setDefaultType","getDefaultType","getTokens","addToken","matcher","lastIndex","match","exec","index","wordLength","tokenize","lines","split","line","charIndex","result","Object","entries","endLine","endColumn","TOKENS","STRING","NUMBER","WHITE_SPACE","COMA","COLON","TRUE_BOOLEAN","FALSE_BOOLEAN","NULL","START_BRACKET","END_BRACKET","START_BRACE","END_BRACE","parser","tokenizer","astBuilder","parse","ast","parseASTBranch","astBranch","parseObject","parseArray","parsePrimitif","json","property","bind"],"mappings":"2OAaA,MAAMA,UAAyBC,MAC7BC,YAAYC,GACVC,MACE,IAAID,EAAME,mCAAmCF,EAAMG,sBAAsBH,EAAMI,eAEjFC,KAAKC,KAAO,kBACb,EAGH,MAAMC,EACJR,cAAgB,CAEhBS,UAAUC,GACR,OAAOA,EACJC,UAAU,EAAGD,EAAIE,OAAS,GAC1BC,QAAQ,QAAS,KACrB,CAEDC,cAAcb,GACZ,MAAO,CACLc,KAAM,UACNZ,MAAsB,iBAAfF,EAAMc,KAEhB,CAEDC,gBAAgBf,GACd,MAAO,CACLc,KAAM,aACNZ,MAAO,KAEV,CAEDc,aAAahB,GACX,MAAO,CACLc,KAAM,SACNZ,MAAOG,KAAKG,UAAUR,EAAME,OAE/B,CAEDe,YAAYjB,GACV,MAAO,CACLc,KAAM,QACNI,WAAY,GAEf,CAEDC,aAAanB,GACX,MAAO,CACLc,KAAM,SACNI,WAAY,GAEf,CAEDE,aAAapB,GACX,MAAO,CACLc,KAAM,SACNZ,MAAOmB,OAAOrB,EAAME,OAEvB,CAEDoB,UAAUtB,GACR,MAAO,CACLc,KAAM,aACNR,KAAMD,KAAKG,UAAUR,EAAME,OAC3BgB,WAAY,GAEf,CAEDK,SAASC,GACP,MAAMC,EAAkB,CAAEX,KAAM,OAAQI,WAAY,IAC9CQ,EAAmB,CAACD,GAE1B,IAAIE,EAAmB,KACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOb,SAAUiB,EAAG,CACtC,MAAMC,EAAcL,EAAOI,GACrBE,EAAcJ,EAAUA,EAAUf,OAAS,GAEjD,GAAyB,YAArBkB,EAAYf,KACd,MAAM,IAAIjB,EAAiBgC,GACtB,GACgB,iBAArBA,EAAYf,MACS,kBAArBe,EAAYf,KAEZgB,EAAYZ,WAAWa,KAAK1B,KAAKQ,cAAcgB,SAC1C,GAAyB,SAArBA,EAAYf,KACrBgB,EAAYZ,WAAWa,KAAK1B,KAAKU,gBAAgBc,SAC5C,GAAyB,WAArBA,EAAYf,KACrBgB,EAAYZ,WAAWa,KAAK1B,KAAKe,aAAaS,SACzC,GAAyB,WAArBA,EAAYf,KACrB,GAAyB,WAArBgB,EAAYhB,KAAmB,CACjC,MAAMkB,EAAQ3B,KAAKiB,UAAUO,GAC7BC,EAAYZ,WAAWa,KAAKC,GAC5BN,EAAUK,KAAKC,EAChB,MAAMF,EAAYZ,WAAWa,KAAK1B,KAAKW,aAAaa,SAChD,GAAyB,kBAArBA,EAAYf,KAA0B,CAC/C,MAAMkB,EAAQ3B,KAAKY,YAAYY,GAC/BC,EAAYZ,WAAWa,KAAKC,GAC5BN,EAAUK,KAAKC,EAChB,MAAM,GAAyB,gBAArBH,EAAYf,KAAwB,CAC7C,MAAMkB,EAAQ3B,KAAKc,aAAaU,GAChCC,EAAYZ,WAAWa,KAAKC,GAC5BN,EAAUK,KAAKC,EAChB,MAAM,GAAyB,gBAArBH,EAAYf,KAAwB,CAC7C,GACuB,UAArBgB,EAAYhB,MACZgB,EAAYZ,WAAWP,OAAS,GAAM,EAEtC,MAAM,IAAId,EAAiB8B,GAC7B,GAAyB,UAArBG,EAAYhB,KACd,MAAM,IAAIjB,EAAiBgC,GAC7BH,EAAUO,KACX,MAAM,GAAyB,cAArBJ,EAAYf,KAAsB,CAC3C,GACuB,WAArBgB,EAAYhB,MACZgB,EAAYZ,WAAWP,OAAS,GAAM,EAEtC,MAAM,IAAId,EAAiB8B,GAM7B,GAJyB,eAArBG,EAAYhB,MACdY,EAAUO,MAGiC,WAAzCP,EAAUA,EAAUf,OAAS,GAAGG,KAClC,MAAM,IAAIjB,EAAiBgC,GAE7BH,EAAUO,KACX,MAAM,GAAyB,SAArBJ,EAAYf,KAAiB,CACtC,GAAyB,eAArBgB,EAAYhB,MAA8C,UAArBgB,EAAYhB,KACnD,MAAM,IAAIjB,EAAiBgC,GAGJ,eAArBC,EAAYhB,MACdY,EAAUO,KAEb,MAAM,GAAyB,UAArBJ,EAAYf,MACI,eAArBgB,EAAYhB,KACd,MAAM,IAAIjB,EAAiBgC,GAM/B,GAFyB,gBAArBA,EAAYf,OAAwBa,EAAmBE,GAEvDJ,EAAKP,WAAWP,OAAS,EAAG,MAAM,IAAId,EAAiBgC,EAE5D,CAED,OAAOJ,CACR,ECrJH,MAAMS,EAGJnC,YAAoByB,EAAiB,IAAjBnB,KAAMmB,OAANA,EAFZnB,KAAW8B,YAAG,SAEqB,CAE3CC,eAAetB,GACbT,KAAK8B,YAAcrB,CACpB,CAEDuB,iBACE,OAAOhC,KAAK8B,WACb,CAEDG,YACE,OAAOjC,KAAKmB,MACb,CAEDe,SAASzB,EAAcZ,GACrBG,KAAKmB,OAAOV,GAAQZ,CACrB,CAEOsC,QAAQ/B,EAAaK,EAAcZ,GACzCA,EAAMuC,UAAY,EAClB,MAAMC,EAAQxC,EAAMyC,KAAKlC,GACzB,OAAKiC,GAAyB,IAAhBA,EAAME,MAGb,CACL9B,OACA+B,WAAYH,EAAM,GAAG/B,QAJd,CAAEG,KAAMT,KAAK8B,YAAaU,WAAY,EAMhD,CAEDC,SAASrC,GACP,MAAMe,EAAS,GACTuB,EAAQtC,EAAIuC,MAAM,SAExB,IAAK,IAAI7C,EAAY,EAAGA,EAAY4C,EAAMpC,SAAUR,EAAW,CAC7D,MAAM8C,EAAOF,EAAM5C,GAEnB,IAAK,IAAIC,EAAc,EAAGA,EAAc6C,EAAKtC,SAAUP,EAAa,CAClE,MAAM8C,GAAa/C,EAAY,IAAMC,EAAc,GAAK,EAExD,IAAI+C,EAAS,KACb,IAAK,MAAOrC,EAAMZ,KAAUkD,OAAOC,QAAQhD,KAAKmB,QAM9C,GALA2B,EAAS9C,KAAKmC,QACZ/B,EAAIC,UAAUwC,EAAWzC,EAAIE,QAC7BG,EACAZ,GAEEiD,EAAOrC,OAAST,KAAK8B,YAAa,MAGxCX,EAAOO,KAAK,CACVjB,KAAMqC,EAAOrC,KACbZ,MAAOO,EAAIC,UAAUwC,EAAWA,EAAYC,EAAON,YACnD1C,YACAC,cACAkD,QAASnD,EACToD,UAAWnD,EAAc+C,EAAON,WAAa,IAE/CzC,GAAe+C,EAAON,WAAa,CACpC,CACF,CAED,OAAOrB,CACR,ECnEH,MAAMgC,EAAS,CACbC,OAAQ,uBACRC,OAAQ,eACRC,YAAa,MACbC,KAAM,IACNC,MAAO,IACPC,aAAc,OACdC,cAAe,QACfC,KAAM,OACNC,cAAe,KACfC,YAAa,KACbC,YAAa,KACbC,UAAW,MCIb,MAAMC,EAAS,IDDf,MAAAtE,cACUM,KAAAiE,UAAY,IAAIpC,EAAUsB,GAC1BnD,KAAAkE,WAAa,IAAIhE,CA2C1B,CAzCCiE,MAAM/D,GAGJ,MAAMe,EAASnB,KAAKiE,UAAUxB,SAASrC,GACjCgE,EAAMpE,KAAKkE,WAAWhD,SAASC,GACrC,OAAOnB,KAAKqE,eAAeD,EAAIvD,WAAW,GAC3C,CAEOwD,eACNC,GAEA,MAAuB,WAAnBA,EAAU7D,KACLT,KAAKuE,YAAYD,GAGH,UAAnBA,EAAU7D,KACLT,KAAKwE,WAAWF,GAGlBtE,KAAKyE,cAAcH,EAC3B,CAEOE,WAAWF,GACjB,MAAMI,EAAkB,GACxB,IAAK,MAAMC,KAAYL,EAAUzD,WAC/B6D,EAAKhD,KAAK1B,KAAKqE,eAAeM,IAEhC,OAAOD,CACR,CAEOH,YAAYD,GAClB,MAAMI,EAAmB,CAAA,EACzB,IAAK,MAAMC,KAAYL,EAAUzD,WAC/B6D,EAAKC,EAAS1E,MAAQD,KAAKqE,eAAeM,EAAS9D,WAAW,IAEhE,OAAO6D,CACR,CAEOD,cAAcH,GACpB,OAAOA,EAAUzE,KAClB,UCzCYmE,EAAOG,MAAMS,KAAKZ"}